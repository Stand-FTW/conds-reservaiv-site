"use strict";(self.webpackChunkapp=self.webpackChunkapp||[]).push([[6364],{96364:(q,P,w)=>{w.r(P),w.d(P,{FilesystemWeb:()=>E});var l=w(15861),x=w(47423),D=w(61443);function R(_){const n=_.split("/").filter(r=>"."!==r),t=[];return n.forEach(r=>{".."===r&&t.length>0&&".."!==t[t.length-1]?t.pop():t.push(r)}),t.join("/")}class E extends x.Uw{constructor(){var n;super(...arguments),n=this,this.DB_VERSION=1,this.DB_NAME="Disc",this._writeCmds=["add","put","delete"],this.downloadFile=function(){var t=(0,l.Z)(function*(r){var e,i;const d=(0,x.Sd)(r,r.webFetchExtra),o=yield fetch(r.url,d);let a;if(r.progress)if(o?.body){const c=o.body.getReader();let u=0;const h=[],g=o.headers.get("content-type"),f=parseInt(o.headers.get("content-length")||"0",10);for(;;){const{done:b,value:m}=yield c.read();if(b)break;h.push(m),u+=m?.length||0;const v={url:r.url,bytes:u,contentLength:f};n.notifyListeners("progress",v)}const y=new Uint8Array(u);let p=0;for(const b of h)typeof b>"u"||(y.set(b,p),p+=b.length);a=new Blob([y.buffer],{type:g||void 0})}else a=new Blob;else a=yield o.blob();return{path:(yield n.writeFile({path:r.path,directory:null!==(e=r.directory)&&void 0!==e?e:void 0,recursive:null!==(i=r.recursive)&&void 0!==i&&i,data:a})).uri,blob:a}});return function(r){return t.apply(this,arguments)}}()}initDb(){var n=this;return(0,l.Z)(function*(){if(void 0!==n._db)return n._db;if(!("indexedDB"in window))throw n.unavailable("This browser doesn't support IndexedDB");return new Promise((t,r)=>{const e=indexedDB.open(n.DB_NAME,n.DB_VERSION);e.onupgradeneeded=E.doUpgrade,e.onsuccess=()=>{n._db=e.result,t(e.result)},e.onerror=()=>r(e.error),e.onblocked=()=>{console.warn("db blocked")}})})()}static doUpgrade(n){const r=n.target.result;n.oldVersion,r.objectStoreNames.contains("FileStorage")&&r.deleteObjectStore("FileStorage"),r.createObjectStore("FileStorage",{keyPath:"path"}).createIndex("by_folder","folder")}dbRequest(n,t){var r=this;return(0,l.Z)(function*(){const e=-1!==r._writeCmds.indexOf(n)?"readwrite":"readonly";return r.initDb().then(i=>new Promise((d,o)=>{const c=i.transaction(["FileStorage"],e).objectStore("FileStorage")[n](...t);c.onsuccess=()=>d(c.result),c.onerror=()=>o(c.error)}))})()}dbIndexRequest(n,t,r){var e=this;return(0,l.Z)(function*(){const i=-1!==e._writeCmds.indexOf(t)?"readwrite":"readonly";return e.initDb().then(d=>new Promise((o,a)=>{const h=d.transaction(["FileStorage"],i).objectStore("FileStorage").index(n)[t](...r);h.onsuccess=()=>o(h.result),h.onerror=()=>a(h.error)}))})()}getPath(n,t){const r=void 0!==t?t.replace(/^[/]+|[/]+$/g,""):"";let e="";return void 0!==n&&(e+="/"+n),""!==t&&(e+="/"+r),e}clear(){var n=this;return(0,l.Z)(function*(){(yield n.initDb()).transaction(["FileStorage"],"readwrite").objectStore("FileStorage").clear()})()}readFile(n){var t=this;return(0,l.Z)(function*(){const r=t.getPath(n.directory,n.path),e=yield t.dbRequest("get",[r]);if(void 0===e)throw Error("File does not exist.");return{data:e.content?e.content:""}})()}writeFile(n){var t=this;return(0,l.Z)(function*(){const r=t.getPath(n.directory,n.path);let e=n.data;const i=n.encoding,d=n.recursive,o=yield t.dbRequest("get",[r]);if(o&&"directory"===o.type)throw Error("The supplied path is a directory.");const a=r.substr(0,r.lastIndexOf("/"));if(void 0===(yield t.dbRequest("get",[a]))){const h=a.indexOf("/",1);if(-1!==h){const g=a.substr(h);yield t.mkdir({path:g,directory:n.directory,recursive:d})}}if(!(i||e instanceof Blob||(e=e.indexOf(",")>=0?e.split(",")[1]:e,t.isBase64String(e))))throw Error("The supplied data is not valid base64 content.");const c=Date.now(),u={path:r,folder:a,type:"file",size:e instanceof Blob?e.size:e.length,ctime:c,mtime:c,content:e};return yield t.dbRequest("put",[u]),{uri:u.path}})()}appendFile(n){var t=this;return(0,l.Z)(function*(){const r=t.getPath(n.directory,n.path);let e=n.data;const i=n.encoding,d=r.substr(0,r.lastIndexOf("/")),o=Date.now();let a=o;const s=yield t.dbRequest("get",[r]);if(s&&"directory"===s.type)throw Error("The supplied path is a directory.");if(void 0===(yield t.dbRequest("get",[d]))){const h=d.indexOf("/",1);if(-1!==h){const g=d.substr(h);yield t.mkdir({path:g,directory:n.directory,recursive:!0})}}if(!i&&!t.isBase64String(e))throw Error("The supplied data is not valid base64 content.");if(void 0!==s){if(s.content instanceof Blob)throw Error("The occupied entry contains a Blob object which cannot be appended to.");e=void 0===s.content||i?s.content+e:btoa(atob(s.content)+atob(e)),a=s.ctime}const u={path:r,folder:d,type:"file",size:e.length,ctime:a,mtime:o,content:e};yield t.dbRequest("put",[u])})()}deleteFile(n){var t=this;return(0,l.Z)(function*(){const r=t.getPath(n.directory,n.path);if(void 0===(yield t.dbRequest("get",[r])))throw Error("File does not exist.");if(0!==(yield t.dbIndexRequest("by_folder","getAllKeys",[IDBKeyRange.only(r)])).length)throw Error("Folder is not empty.");yield t.dbRequest("delete",[r])})()}mkdir(n){var t=this;return(0,l.Z)(function*(){const r=t.getPath(n.directory,n.path),e=n.recursive,i=r.substr(0,r.lastIndexOf("/")),d=(r.match(/\//g)||[]).length,o=yield t.dbRequest("get",[i]),a=yield t.dbRequest("get",[r]);if(1===d)throw Error("Cannot create Root directory");if(void 0!==a)throw Error("Current directory does already exist.");if(!e&&2!==d&&void 0===o)throw Error("Parent directory must exist");if(e&&2!==d&&void 0===o){const u=i.substr(i.indexOf("/",1));yield t.mkdir({path:u,directory:n.directory,recursive:e})}const s=Date.now(),c={path:r,folder:i,type:"directory",size:0,ctime:s,mtime:s};yield t.dbRequest("put",[c])})()}rmdir(n){var t=this;return(0,l.Z)(function*(){const{path:r,directory:e,recursive:i}=n,d=t.getPath(e,r),o=yield t.dbRequest("get",[d]);if(void 0===o)throw Error("Folder does not exist.");if("directory"!==o.type)throw Error("Requested path is not a directory");const a=yield t.readdir({path:r,directory:e});if(0!==a.files.length&&!i)throw Error("Folder is not empty");for(const s of a.files){const c=`${r}/${s.name}`;"file"===(yield t.stat({path:c,directory:e})).type?yield t.deleteFile({path:c,directory:e}):yield t.rmdir({path:c,directory:e,recursive:i})}yield t.dbRequest("delete",[d])})()}readdir(n){var t=this;return(0,l.Z)(function*(){const r=t.getPath(n.directory,n.path),e=yield t.dbRequest("get",[r]);if(""!==n.path&&void 0===e)throw Error("Folder does not exist.");const i=yield t.dbIndexRequest("by_folder","getAllKeys",[IDBKeyRange.only(r)]);return{files:yield Promise.all(i.map(function(){var o=(0,l.Z)(function*(a){let s=yield t.dbRequest("get",[a]);return void 0===s&&(s=yield t.dbRequest("get",[a+"/"])),{name:a.substring(r.length+1),type:s.type,size:s.size,ctime:s.ctime,mtime:s.mtime,uri:s.path}});return function(a){return o.apply(this,arguments)}}()))}})()}getUri(n){var t=this;return(0,l.Z)(function*(){const r=t.getPath(n.directory,n.path);let e=yield t.dbRequest("get",[r]);return void 0===e&&(e=yield t.dbRequest("get",[r+"/"])),{uri:e?.path||r}})()}stat(n){var t=this;return(0,l.Z)(function*(){const r=t.getPath(n.directory,n.path);let e=yield t.dbRequest("get",[r]);if(void 0===e&&(e=yield t.dbRequest("get",[r+"/"])),void 0===e)throw Error("Entry does not exist.");return{type:e.type,size:e.size,ctime:e.ctime,mtime:e.mtime,uri:e.path}})()}rename(n){var t=this;return(0,l.Z)(function*(){yield t._copy(n,!0)})()}copy(n){var t=this;return(0,l.Z)(function*(){return t._copy(n,!1)})()}requestPermissions(){return(0,l.Z)(function*(){return{publicStorage:"granted"}})()}checkPermissions(){return(0,l.Z)(function*(){return{publicStorage:"granted"}})()}_copy(n,t=!1){var r=this;return(0,l.Z)(function*(){let{toDirectory:e}=n;const{to:i,from:d,directory:o}=n;if(!i||!d)throw Error("Both to and from must be provided");e||(e=o);const a=r.getPath(o,d),s=r.getPath(e,i);if(a===s)return{uri:s};if(function F(_,n){_=R(_),n=R(n);const t=_.split("/"),r=n.split("/");return _!==n&&t.every((e,i)=>e===r[i])}(a,s))throw Error("To path cannot contain the from path");let c;try{c=yield r.stat({path:i,directory:e})}catch{const y=i.split("/");y.pop();const p=y.join("/");if(y.length>0&&"directory"!==(yield r.stat({path:p,directory:e})).type)throw new Error("Parent directory of the to path is a file")}if(c&&"directory"===c.type)throw new Error("Cannot overwrite a directory with a file");const u=yield r.stat({path:d,directory:o}),h=function(){var f=(0,l.Z)(function*(y,p,b){const m=r.getPath(e,y),v=yield r.dbRequest("get",[m]);v.ctime=p,v.mtime=b,yield r.dbRequest("put",[v])});return function(p,b,m){return f.apply(this,arguments)}}(),g=u.ctime?u.ctime:Date.now();switch(u.type){case"file":{const f=yield r.readFile({path:d,directory:o});let y;t&&(yield r.deleteFile({path:d,directory:o})),!(f.data instanceof Blob)&&!r.isBase64String(f.data)&&(y=D.ez.UTF8);const p=yield r.writeFile({path:i,directory:e,data:f.data,encoding:y});return t&&(yield h(i,g,u.mtime)),p}case"directory":{if(c)throw Error("Cannot move a directory over an existing object");try{yield r.mkdir({path:i,directory:e,recursive:!1}),t&&(yield h(i,g,u.mtime))}catch{}const f=(yield r.readdir({path:d,directory:o})).files;for(const y of f)yield r._copy({from:`${d}/${y.name}`,to:`${i}/${y.name}`,directory:o,toDirectory:e},t);t&&(yield r.rmdir({path:d,directory:o}))}}return{uri:s}})()}isBase64String(n){try{return btoa(atob(n))==n}catch{return!1}}}E._debug=!0}}]);